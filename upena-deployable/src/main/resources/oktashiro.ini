[main]
# Let's use some in-memory caching to reduce the number of runtime lookups against a remote user store.
# A real application might want to use a more robust caching solution (e.g. ehcache or a
# distributed cache).  When using such caches, be aware of your cache TTL settings: too high
# a TTL and the cache won't reflect any potential changes in Stormpath fast enough.  Too low
# and the cache could evict too often, reducing performance.

cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager

sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
sessionManager.sessionIdUrlRewritingEnabled = false

securityManager.sessionMode=native
securityManager.sessionManager.globalSessionTimeout = 60000
securityManager.sessionManager = $sessionManager
securityManager.cacheManager = $cacheManager

securityManager.sessionManager.sessionIdCookie.secure = true
securityManager.rememberMeManager.cookie.secure = true

shiro.loginUrl = /ui/auth/login
autho = com.jivesoftware.os.upena.deployable.okta.OktaFormAuthenticationFilter
autho.loginUrl = /ui/auth/login
autho.successUrl = /ui
autho.failureKeyAttribute = shiroLoginFailure

authom = com.jivesoftware.os.upena.deployable.okta.OktaFormAuthenticationFilter
authom.loginUrl = /ui/auth/okta/mfa
authom.successUrl = /ui
authom.failureKeyAttribute = shiroLoginFailure

logout.redirectUrl = /ui
roles.unauthorizedUrl = /ui/auth/unauthorized
perms.unauthorizedUrl = /ui/auth/unauthorized

oktaRealmCredentialsMatcher = com.jivesoftware.os.upena.deployable.okta.OktaCredentialsMatcher
oktaRealm = com.jivesoftware.os.upena.deployable.okta.OktaRealm
oktaRealm.credentialsMatcher = $oktaRealmCredentialsMatcher

# -----------------------------------------------------------------------------
# Users and their assigned roles
#
# Each line conforms to the format defined in the
# org.apache.shiro.realm.text.TextConfigurationRealm#setUserDefinitions JavaDoc
# -----------------------------------------------------------------------------
[users]
# user 'root' with password 'secret' and the 'admin' role
# root = secret, admin
# developer = secret, readwrite
# guest = guest, readonly

# -----------------------------------------------------------------------------
# Roles with assigned permissions
#
# Each line conforms to the format defined in the
# org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc
# -----------------------------------------------------------------------------
[roles]
# 'admin' role has all permissions, indicated by the wildcard '*'
# admin = *
# readwrite = read, write
# readonly = read

[urls]
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.
/ui/auth/login = autho
/ui/auth/okta/mfa = authom
/ui/auth/logout = logout
/ui/** = autho